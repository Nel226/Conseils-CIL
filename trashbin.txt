WidgetsFlutterBinding.ensureInitialized();
  final appDocumentDirectory = await getApplicationDocumentsDirectory();
  Hive.init(appDocumentDirectory.path);

 
  var conseilsBox = Hive.box<Conseil>('conseils');

 
conseilsBox.add(Conseil('A faire', 'JJHJ', '', false));
  conseilsBox.add(
      Conseil('Titre', 'Description', 'Image', true)); // Ajout de cet appel
 
// Couleur de la bordure
 
// Largeur de la bordure
 
FutureBuilder(
                future: Hive.openBox<Conseil>('conseils'),
                builder: (context, AsyncSnapshot<Box<Conseil>> snapshot) {
                  if (snapshot.connectionState == ConnectionState.done) {
                    if (snapshot.hasError) {
                      return Center(
                        child: Text('Error: ${snapshot.error}'),
                      );
                    } else {
                      var conseils = snapshot.data!.values.toList();
                      return ListView.builder(
                        itemCount: conseils.length,
                        itemBuilder: (context, index) {
                          var conseil = conseils[index];
                          return ListTile(
                            title: Text(conseil.titre),
                            subtitle: Text(conseil.description),
                          );
                        },
                      );
                    }
                  } else {
                    return Center(
                      child: CircularProgressIndicator(),
                    );
                  }
                },
              ),
 
  conseilsBox.add(Conseil('A faire', 'JJHJ', '', false));

 
conseilsBox.add(
      ConseilconseilsBox.add(Conseil('A faire', 'JJHJ', '', false)););

 
titre: 'Ecrire un article de blog',
 
 Lister les tâches = 
 
  var quizBox = Hive.box<>;

 
('conseils')
 
Hive.init(appDocumentDirectory.path);
  await Hive.initFlutter();
 
Hive.init(appDocumentDirectory.path);
  await Hive.initFlutter();
 
 // Élévation de la carte
 
MediaQuery.of(context).size.height
 
MediaQuery.of(context).size.height
 
kBottomNavigationBarHeight -
                                    300.0
 
kBottomNavigationBarHeight -
                                    300.0)
 
image: AssetImage(
                                              'assets/images/protection-concept-with-lock.jpg'),
 
assetpath
 
ackground_image.jpg
 
Text(
                            'Titre de la carte',
                            style: TextStyle(
                              fontWeight: FontWeight.bold, // Texte en gras
                              fontSize: 18, // Taille de la police
                            ),
                          ),
 
// Icône de coche
 
// Couleur de fond verte
 
import 'dart:convert';
 
token2?
 
token2 = '';
 
= ''
 
get
 
response.body.
 
'./data/token_local_storage.dart' as token_local_storage
 
data
 
final response = await http.post(
    body:,
  );
 
{'key': 'value'}
 
    Uri.parse('http://192.168.11.101:3000/api/auth/login'),

 
example.com
 
void main() => runApp(const NavigationBarApp());
Future<void> fetchData() async {
  final url =
      Uri.https('http://serveururl/api/conseils/mobile.com', '/api/data');
  final response = await http.get(url);

  if (response.statusCode == 200) {
    // Request was successful, parse the response data
    final jsonData = jsonDecode(response.body);
    // Process the data as needed
    print(jsonData);
  } else {
    // Request failed with an error code, handle the error
    print('Request failed with status: ${response.statusCode}');
  }
}

 
Future<void> fetchData() async {
  final url =
      Uri.https('http://serveururl/api/conseils/mobile.com', '/api/data');
  final response = await http.get(url);

  if (response.statusCode == 200) {
    
    final jsonData = jsonDecode(response.body);
    
    print(jsonData);
  } else {
    
    print('Request failed with status: ${response.statusCode}');
  }
}
 
@override
void initState() {
  super.initState();
  fetchData(); // Appel de la fonction fetchData pour récupérer les données
}
 
// Request was successful, parse the response data
 
// Request failed with an error code, handle the error
 
// Process the data as needed
 
image1.jpg
 
                    // Autres cartes similaires ici

 
// Ajoutez ici vos FillImageCard supplémentaires
              FillImageCard(
                width: 100,
                heightImage: 70,
                imageProvider: AssetImage('assets/images/logo_cil.png'),
                tags: [],
                title: const Text('data'),
                description: const Text('data'),
              ),
 
_tag('Category', () {}), _tag('Product', () {})
 
_title(),
 
 child: SingleChildScrollView(
  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
  child: Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    mainAxisSize: MainAxisSize.min,
    children: [
      const SizedBox(height: 12),
      SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Row(
          children: [
            FillImageCard(
              width: 200,
              heightImage: 140,
              imageProvider: AssetImage('assets/mockup.png'),
              tags: [_tag('Category', () {}), _tag('Product', () {})],
              title: _title(),
              description: _content(),
            ),
            const SizedBox(width: 12),
            FillImageCard(
              width: 200,
              heightImage: 140,
              imageProvider: AssetImage('assets/mockup.png'),
              tags: [_tag('Category', () {}), _tag('Product', () {})],
              title: _title(),
              description: _content(),
            ),
            const SizedBox(width: 12),
            FillImageCard(
              width: 200,
              heightImage: 140,
              imageProvider: AssetImage('assets/mockup.png'),
              description: _content(),
            ),
            const SizedBox(width: 12),
            FillImageCard(
              width: 200,
              heightImage: 140,
              imageProvider: AssetImage('assets/mockup.png'),
              tags: [_tag('Category', () {})],
            ),
          ],
        ),
      ),
      const SizedBox(height: 12),
      SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Row(
          children: [
            FillImageCard(
              width: 200,
              heightImage: 140,
              imageProvider: AssetImage('assets/mockup.png'),
              tags: [_tag('Category', () {})],
              title: _title(),
              description: _content(),
              footer: _footer(),
            ),
            const SizedBox(width: 12),
            FillImageCard(
              width: 200,
              heightImage: 140,
              imageProvider: AssetImage('assets/mockup.png'),
              tags: [_tag('Category', () {})],
              title: _title(),
              description: _content(),
              footer: _footer(),
            ),
            const SizedBox(width: 12),
            FillImageCard(
              width: 200,
              heightImage: 140,
              imageProvider: AssetImage('assets/mockup.png'),
              tags: [_tag('Category', () {}), _tag('Product', () {})],
              footer: _footer(),
            ),
            const SizedBox(width: 12),
            FillImageCard(
              width: 200,
              heightImage: 140,
              imageProvider: AssetImage('assets/mockup.png'),
              footer: _footer(),
            ),
          ],
        ),
      ),
      const SizedBox(height: 12),
      SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Row(
          children: [
            TransparentImageCard(
              width: 200,
              imageProvider: AssetImage('assets/mockup.png'),
              tags: [
                _tag('Product', () {}),
              ],
              title: _title(color: Colors.white),
              description: _content(color: Colors.white),
            ),
            const SizedBox(width: 12),
            TransparentImageCard(
              width: 200,
              imageProvider: AssetImage('assets/mockup.png'),
              tags: [
                _tag('Product', () {}),
                _tag('Gift', () {}),
              ],
              title: _title(color: Colors.white),
              description: _content(color: Colors.white),
              footer: _footer(color: Colors.white),
            ),
            const SizedBox(width: 12),
            TransparentImageCard(
              width: 200,
              imageProvider: AssetImage('assets/mockup.png'),
              tags: [
                _tag('Product', () {}),
                _tag('Gift', () {}),
                _tag('Category', () {}),
              ],
              footer: _footer(color: Colors.white),
            ),
            const SizedBox(width: 12),
            TransparentImageCard(
              width: 200,
              imageProvider: AssetImage('assets/mockup.png'),
              title: _title(color: Colors.white),
              description: _content(color: Colors.white),
            ),
          ],
        ),
      ),
      const SizedBox(height: 12),
    ],
  ),
),
 
if (index == 2) {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => QuizPage()),
            );
          }
 
import 'quiz.dart';
 
const
 
assets/mockup.png
 
_tag('Category', () {}), _tag('Product', () {})
 
Description
 
Description
 
                        tags: [_tag('Category', () {}), _tag('Product', () {})],

 
const
 
Card(
                  
                ),
 
const
 
olors.green
 
lightbulb
 
            selectedIcon: Icon(Icons.home),

 
const
 
notifications_sharp
 
                Icons.done_sharp,

 
const
 
ListView(
                    scrollDirection: Axis.horizontal,
                    children: <Widget>[
                      Container(
                        width: 150,
                        margin: EdgeInsets.all(8.0),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10.0),
                          color: Colors.white,
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.5),
                              spreadRadius: 2,
                              blurRadius: 3,
                              offset:
                                  Offset(0, 2), // changes position of shadow
                            ),
                          ],
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: <Widget>[
                            Icon(Icons.message),
                            Text('Messages'),
                          ],
                        ),
                      ),
                      Container(
                        width: 150,
                        margin: EdgeInsets.all(8.0),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10.0),
                          color: Colors.white,
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.5),
                              spreadRadius: 2,
                              blurRadius: 3,
                              offset:
                                  Offset(0, 2), // changes position of shadow
                            ),
                          ],
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: <Widget>[
                            Icon(Icons.settings),
                            Text('Settings'),
                          ],
                        ),
                      ),
                    ],
                  ),
 
Row(),
 
Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        _buildCard(stories[1]),
                        _buildCard(stories[2]),
                      ],
                    ),
                  ),,
 
 Container(
                        width: 150,
                        margin: EdgeInsets.all(8.0),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10.0),
                          color: Colors.white,
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.5),
                              spreadRadius: 2,
                              blurRadius: 3,
                              offset:
                                  Offset(0, 2), // changes position of shadow
                            ),
                          ],
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: <Widget>[
                            Icon(Icons.home),
                            Text('Home'),
                          ],
                        ),
                      ),
                      Container(
                        width: 150,
                        margin: EdgeInsets.all(8.0),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10.0),
                          color: Colors.white,
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.5),
                              spreadRadius: 2,
                              blurRadius: 3,
                              offset:
                                  Offset(0, 2), // changes position of shadow
                            ),
                          ],
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: <Widget>[
                            Icon(Icons.notifications),
                            Text('Notifications'),
                          ],
                        ),
                      ),
                      
                    
 
Container(
                        width: 150,
                        margin: EdgeInsets.all(8.0),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10.0),
                          color: Colors.white,
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.5),
                              spreadRadius: 2,
                              blurRadius: 3,
                              offset:
                                  Offset(0, 2), // changes position of shadow
                            ),
                          ],
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: <Widget>[
                            Icon(Icons.message),
                            Text('Messages'),
                          ],
                        ),
                      ),
                      Container(
                        width: 150,
                        margin: EdgeInsets.all(8.0),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10.0),
                          color: Colors.white,
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.5),
                              spreadRadius: 2,
                              blurRadius: 3,
                              offset:
                                  Offset(0, 2), // changes position of shadow
                            ),
                          ],
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: <Widget>[
                            Icon(Icons.settings),
                            Text('Settings'),
                          ],
                        ),
                      ),
 
scrollDirection: Axis.horizontal,
 

                            right:
 
],
                        ),
                      )
 
TextSpan(
                          children: const <TextSpan>[
                            TextSpan(
                              text: 'A la une',
                            ),
 
style: DefaultTextStyle.of(context).style,
 
style: TextStyle(fontWeight: FontWeight.bold)
 
style: TextStyle(fontWeight: FontWeight.bold)),
 
child: Image.network(
                            "https://burkina24.com/wp-content/uploads/2022/08/2C5330B8-BBDB-4A1F-BC3A-C6554877AA3D.jpeg",
                            fit: BoxFit.cover,
                          ),
 
text: 'Hello ',
 
 TextSpan(text: ' world!'),
 
RGB
 
Card(
                  child: ListTile(
                    leading: Icon(Icons.notifications_sharp),
                    title: Text('Notification 2'),
                    subtitle: Text('This is a notification'),
                  ),
                ),
 
import 'package:flutter/material.dart';
 
title: 'Flutter Demo Home Page'
 
home
 
@HiveField(0)
  late String username;
 
, required this.email, required this.password
 
@HiveField(1)
  late String email;

  @HiveField(2)
  late String password;
 
import 'package:hive/hive.dart';

part 'my_model.g.dart'; // Le fichier my_model.g.dart sera généré par Hive

@HiveType(typeId: 1)
class MyModel extends HiveObject {
  @HiveField(0)
  late String name;

  @HiveField(1)
  late int age;
}
 
void main() async {
await Hive.initFlutter();
runApp (MyApp());
}
 
import 'package:flutter/material.dart';
 
